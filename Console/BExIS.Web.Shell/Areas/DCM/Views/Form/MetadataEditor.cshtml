@model MetadataEditorModel
@using BExIS.Web.Shell.Areas.DCM.Models.CreateDataset
@using BExIS.Web.Shell.Areas.DCM.Models.Metadata;
@using System.Web.Configuration;
@using BExIS.Dcm.CreateDatasetWizard
@using BExIS.Dcm.Wizard

@using Telerik.Web.Mvc.UI;

@{
    string lockedClass = "";
    bool locked = false;
    bool editMode = false;
    bool hideOptional = false;

    string showAllClass = " bx-toggle-on";

    HttpRuntimeSection section = System.Configuration.ConfigurationManager.GetSection("system.web/httpRuntime") as HttpRuntimeSection;
    int int_MaxRequestLength = section.MaxRequestLength;
    int mbMax = int_MaxRequestLength/1024;


    if (ViewData.Keys.Contains("Locked"))
    {
        locked = (bool) ViewData["Locked"];
        lockedClass = "bx-disabled";
    }

    if (ViewData.Keys.Contains("HideOptional"))
    {
        hideOptional = (bool) ViewData["HideOptional"];

        showAllClass = hideOptional ? " bx-toggle-off" : " bx-toggle-on";
    }

    #region set actions

    ActionInfo copy = new ActionInfo();

    if (Model.Actions.ContainsKey(CreateTaskmanager.COPY_ACTION))
    {
        copy = Model.Actions[CreateTaskmanager.COPY_ACTION];
    }

    ActionInfo submit = new ActionInfo();

    if (Model.Actions.ContainsKey(CreateTaskmanager.SUBMIT_ACTION))
    {
        submit = Model.Actions[CreateTaskmanager.SUBMIT_ACTION];
    }

    ActionInfo cancel = new ActionInfo();

    if (Model.Actions.ContainsKey(CreateTaskmanager.CANCEL_ACTION))
    {
        cancel = Model.Actions[CreateTaskmanager.CANCEL_ACTION];
    }

    ActionInfo reset = new ActionInfo();

    if (Model.Actions.ContainsKey(CreateTaskmanager.RESET_ACTION))
    {
        reset = Model.Actions[CreateTaskmanager.RESET_ACTION];
    }

    #endregion

}
@section Scripts{
    @*<script src="@Url.Content("~/Scripts/minimap/minimap.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/Scripts/minimap/minimap.min.css")" rel="stylesheet" type="text/css" />*@
}


@section Information
{
    <p>Here you can enter metadata for your new dataset. The form varies according to the metadata structure you selected in the first step.
    Mandatory fields are indicated with an red asterisk.</p>
    <p>You can add, remove, or re-order elements (e.g. multiple Creators) using the buttons at the right.</p>

    <p>
        More information 
        @Html.ActionLink("here", "Index", "Help", new { id = 0 }, new { @class = "bx-informationLink", title="go to help", target="_blank"})
    </p>
}


<div id="MetadataEditor">
<div>
    <table>
        <tr>
            @if (locked && Model.EditRight)
            {
                <td>
                    <button onclick="edit()" class="bx-button function">Edit</button>

                    @if (copy.IsComplete())
                    {
                        @Html.ActionLink("Copy", copy.ActionName, copy.ControllerName, new { area = copy.AreaName, id = @Model.DatasetId, type = "DatasetId" }, new { @class = "bx-button function", @id = @Model.DatasetId })
                    }

                    @Html.CheckBox("showAll", @hideOptional, new {OnChange = "switchVisibilityOfOptionalElements()", Name = "showAll", Id = "showAll"})
                    @if (@hideOptional)
                    {
                        <b>show all optional</b>
                    }
                    else
                    {
                        <b>hide all optional</b>
                    }

                </td>

            }

            @if (!Model.Created && !locked && Model.Import)
            {
                <td style="width: 100px">
                    @(Html.Telerik().Upload()
                          .Name("SelectFileUploader")
                          .Multiple(false)
                          .ShowFileList(false)
                          .HtmlAttributes(new {title = "Import from xml"})
                          .ClientEvents(events => events
                              .OnSuccess("OnSuccess")
                              .OnSelect("SelectFileProcess_OnSelect"))
                          .Async(async => async
                              .Save("SelectFileProcess", "Form", new {area = "DCM"})
                              .AutoUpload(true))
                          )
                </td>
                <td>
                    <div id="preloader" style="display: none;">
                        <img src="../../../../Themes/Default/Styles/Default/preloader.GIF"/>
                    </div>
                </td>

            }

            @if (Model.Created && Model.DatasetId != -1 && !@Model.FromEditMode)
            {

                <td>You successfully created dataset: <br/><b>@Model.DatasetTitle</b></td>
                <td>
                    Please use the <b>@Html.ActionLink("Upload Data Wizard ", "StartUploadWizard", "CreateDataset", new {area = "DCM"}, new {title = "Link to upload wizard", @class = "bx-link"})</b><br/>
                    to add primary data to this dataset.
                </td>

                if (@Model.DatasetId > 0)
                {
                    <td>Or see your dataset here <b>@Html.ActionLink(@Model.DatasetTitle, "ShowData", "CreateDataset", new {id = @Model.DatasetId}, new {title = "Link to your dataset.", @class = "bx-link"})</b><br/></td>
                }
            }
        </tr>
    </table>

</div>

    <div id="root" >

        @foreach (var element in Model.StepModelHelpers)
        {
            if (element.Model is MetadataPackageModel)
            {
                <div style="width: 100%; height: 1px; background-color: white"></div>
                @Html.Partial("_metadataCompoundAttributeView", element)
            }
        }

    </div>

    @if (!locked)
    {
        <div class="bx-footer right">

            <!-- only from editmode you have the option to reset-->
            <button onclick="validate()" class="bx-button function" style="float: left;">Validate</button>

            @if (@Model.FromEditMode && @reset.IsComplete())
            {
                <button onclick="reset()" class="bx-button function" style="float: left;">Reset</button>
            }

            @if (@submit.IsComplete())
            {
                <button onclick="submit()" class="bx-button action">Submit</button>
            }

            @if (@Model.FromEditMode && @cancel.IsComplete())
            {
                <button onclick="cancel()" class="bx-button action">Cancel</button>
            }
        </div>
    }



    <script>

        $(document)
            .ready(function() {
                bindMinimap();
            });

        $("#showminimap")
            .click(function() {

                bindMinimap();
            });

        function bindMinimap() {

            if ($('#root').height() > ($(window).height() + 200)) {

                if ($(".miniregion")) {
                    $(".miniregion").remove();
                }

                if ($(".minimap")) {
                    $(".minimap").remove();
                }


                if ($('#root')) {

                    var offset = getRatioHeight($('#root').position().top)+0.05;
                   
                    var previewBody = $('#root')
                        .minimap(
                        {
                            heightRatio: 0.6,
                            widthRatio: 0.1,
                            offsetHeightRatio: offset,
                            offsetWidthRatio: 0.01,
                            position: "right",
                            touch: true,
                            smoothScroll: true,
                            smoothScrollDelay: 200
                        });
                }

            } else {
                if ($(".miniregion")) {
                    $(".miniregion").remove();
                }

                if ($(".minimap")) {
                    $(".minimap").remove();
                }
            }
        }

        function getRatioHeight(containerStart) {
            alert(containerStart);
            alert($(window).height());

            return (containerStart / $(window).height());

        }

        function SelectFileProcess_OnSelect(e) {

            $("#preloader").show();

            var file = e.files[0];
            var maxsize = '@int_MaxRequestLength';

        if (!IsExtentionValid(file.extension)) {
            alert("Only .xml files can be uploaded");
            e.preventDefault();
            return false;
        } else {

            if (file.size > (maxsize * 1024)) {

                alert("Max file : " +
                    maxsize / 1024 +
                    " MB is supported. Please contact your administrator to upload bigger files.");
                e.preventDefault();
                return false;
            }
        }

    }

    /*
    Is Extention from selected file
    in list of supported files
    */
    function IsExtentionValid(fileExtention) {
        var extListAsString = ".xml";
        var extList = extListAsString.split(',');

        for (var i = 0; i < extList.length; i++) {
            if (fileExtention.toLowerCase() == extList[i]) {
                return true;
            }
        }

        return false;
    }

    function OnSuccess() {
        //alert("on success");

        $.get('@Url.Action("LoadExternalXml", "Form", new RouteValueDictionary {{"area", "DCM"}})',
            function(response) {
                //alert("on success");

                $('#MetadataEditor').replaceWith(response);

                $("#preloader").hide();
            })
    }

    function validate() {
        $.get('@Url.Action("Validate", "Form", new RouteValueDictionary {{"area", "DCM"}})',
            function(response) {
                $('#MetadataEditor').replaceWith(response);
            })
    }

    function cancel() {

        if (confirm('Are you sure you want cancel the metadata formular?')) {
            $.get('@Url.Action(@cancel.ActionName, @cancel.ControllerName, new RouteValueDictionary {{"area", @cancel.AreaName}})',
                function(response) {
                    $('#MetadataEditor').replaceWith(response);
                })
        } else {
            return false;
        }
    }

    function reset() {

        if (confirm('Are you sure you want reset the metadata formular?')) {
            $.get('@Url.Action(@reset.ActionName, @reset.ControllerName, new RouteValueDictionary {{"area", @reset.AreaName}})',
                function(response) {
                    $('#MetadataEditor').replaceWith(response);
                })
        } else {
            return false;
        }
    }

    function edit() {
        $
            .get('@Url.Action("EditMetadata", "Form", new RouteValueDictionary {{"area", "DCM"}, {"datasetId", @Model.DatasetId}, {"locked", false}, {"created", false}})',
                function(response) {
                    $('#MetadataEditor').replaceWith(response);
                })
    }


    function submit() {


        $.get('@Url.Action("Validate", "Form", new RouteValueDictionary {{"area", "DCM"}})',
            function(response) {
                $('#MetadataEditor').replaceWith(response);

                var errors = $('.bx-input-error');

                if (errors.length == 0) {
                    callSubmitAction();
                } else {
                    if (confirm('Metadata is not valid! \n Do you really want to save?')) {
                        callSubmitAction();
                    }
                }
            })
    }

    function callSubmitAction() {
        $
            .get('@Url.Action(@submit.ActionName, @submit.ControllerName, new RouteValueDictionary {{"area", @submit.AreaName}, {"editMode", @Model.FromEditMode}})',
                function(response) {
                    $('#MetadataEditor').replaceWith(response);
                    $('html, body').animate({ scrollTop: 0 }, 'slow');
                })
    }

    function switchVisibilityOfOptionalElements() {

        var hidden = '@hideOptional';

        $.get('@Url.Action("SwitchVisibilityOfOptionalElements", "Form", new RouteValueDictionary {{"area", "DCM"}})', { hidden: hidden },
                function(response) {
                    $('#MetadataEditor').replaceWith(response);
                });
    }

    </script>
</div>
